from pyrogram import Client, filters
from pyrogram.errors import FloodWait
from time import sleep
import emoji
from heart import heart_emoji
import time
import asyncio
from pyrogram.types import ChatPermissions
import requests
import re

app = Client(
    "my_accounth",
    api_id=20472471,
    api_hash="e7be3786eeafc26592aa3613bb18238a"
)

@app.on_message(filters.command("help", prefixes="") & filters.me)
def animate_f(_, message):
    animated_text = [
        "HACKGRM\n1 `—Å–Ω–æ—Å`",
        "HACKGRAM\n1. `—Å–Ω–æ—Å`\n2. —Å–ø–∞–º`",
        "HACKGRAM\n1.`—Å–Ω–æ—Å`\n2 `—Å–ø–∞–º`\n3 `–¥–æ–∫—Å`",
        "HACKGRAM\n1 `—Å–Ω–æ—Å`\n2 `—Å–ø–∞–º`\n3 `–¥–æ–∫—Å`\n4 `–ø–∞—Ä—Å`",
        "HACKGRAM\n1 `—Å–Ω–æ—Å`\n2 `—Å–ø–∞–º`\n3 `–¥–æ–∫—Å`\n4 `–ø–∞—Ä—Å`\n5 `–≤–∑–ª–æ–º",
        "HACKGRAM\n1 `—Å–Ω–æ—Å`\n2 `—Å–ø–∞–º`\n3 `–¥–æ–∫—Å`\n4 `–ø–∞—Ä—Å`\n5 `–≤–∑–ª–æ–º`\n6 `–≤–æ–π—Å`",
        "HACKGRAM\n1 `—Å–Ω–æ—Å`\n2 `—Å–ø–∞–º`\n3 `–¥–æ–∫—Å`\n4 `–ø–∞—Ä—Å`\n5 `–≤–∑–ª–æ–º`\n6 `–≤–æ–π—Å`\n7 `–¥–¥–æ—Å`",
        "HACKGRAM\n1 `—Å–Ω–æ—Å`\n2 `—Å–ø–∞–º`\n3 `–¥–æ–∫—Å`\n4 `–ø–∞—Ä—Å`\n5 `–≤–∑–ª–æ–º`\n6 `–≤–æ–π—Å`\n7 `–¥–¥–æ—Å`\n8 `—Ä–µ–ø–æ—Ä—Ç`",
        "HACKGRAM\n1 `—Å–Ω–æ—Å`\n2 `—Å–ø–∞–º`\n3 `–¥–æ–∫—Å`\n4 `–ø–∞—Ä—Å`\n5 `–≤–∑–ª–æ–º`\n6 `–≤–æ–π—Å`\n7 `–¥–¥–æ—Å`\n8 `—Ä–µ–ø–æ—Ä—Ç`\n9 `.tp - –∞–Ω–∏–º–∞—Ü–∏—è`",
        
       
       ]
    
    for frame in animated_text:
        message.edit(frame)
        sleep(0.8)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∫–∞–¥—Ä–∞–º–∏ –∞–Ω–∏–º–∞—Ü–∏–∏

#–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–±—ã –Ω–∞ —á–∞—Ç
def send_report(chat_id, report_message):
    try:
        app.send_message(chat_id, report_message)
    except FloodWait as e:
        sleep(e.x)

@app.on_message(filters.command("—Å–Ω–æ—Å", prefixes="") & filters.me)
def animate_f(_, message):
    animated_text = [
        "__search by id__",
        "__telegram id found!__",
        "__looking for violations__",
        "__looking for violations.__",
        "__looking for violations..__",
        "__looking for violations...__",
        "**found!**",
        "**insult complaint sent**",
        "**spam complaint sent**",
        "**pornographers complaint sent**",
        "**complaint personal data sent**",
        "**complaint fake account sent**",
        "**drug complaint sent**",
        "__wait for the demolition!__",
       
       ]

    chat_id = message.chat.id  # –ü–æ–ª—É—á–∞–µ–º ID —á–∞—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∂–∞–ª–æ–±—ã


    for frame in animated_text:
        message.edit(frame)
        sleep(0.5)

    
        # –°–ø–∏—Å–æ–∫ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∂–∞–ª–æ–±
        reasons = ["–æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è", "spam", "pornographers", "–ª–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", "–Ω–µ–Ω–∞—Å—Ç–æ—è—â–∏–π –∞–∫–∫–∞—É–Ω—Ç", "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏"]

# –¶–∏–∫–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∂–∞–ª–æ–± –Ω–∞ –∫–∞–∂–¥—É—é –ø—Ä–∏—á–∏–Ω—É
        for reason in reasons:
            if reason in frame:
                send_report(chat_id, "–ñ–∞–ª–æ–±–∞ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏–µ: " + reason)

@app.on_message(filters.command("—Å–ø–∞–º", prefixes="") & filters.me)
def spam_messages(client, message):
    # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    _, count, text = message.text.split(" ", 2)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ
    count = int(count)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    for _ in range(count):
        message.reply_text(text)
        time.sleep(1)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)


bot_usernames = ["@eyeofbeholder_bot", "@fanstatbot_robot", "@UniversalSearchEasyBot", "@osintkit_bot", "@anotherLeakOSINTrobotbot", "@QuicckOSINT_bot", "@telesint_bot", "@SangMata_BOT", "@tgscan_clone_robot", "@useridinfobot",]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∏–∫–Ω–µ–π–º—ã –≤–∞—à–∏—Ö –±–æ—Ç–æ–≤

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –±–æ—Ç—ã
def send_to_bots(user_id):
    for bot_username in bot_usernames:
        app.send_message(bot_username, user_id)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ–±—Ä–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –±–æ—Ç–æ–≤
@app.on_message(filters.chat(bot_usernames) & ~filters.me)
def save_messages(client, message):
    with open("responses.txt", "a") as file:  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        file.write(f"{message.chat.username}: {message.text}\n")

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–¥–æ–∫—Å"
@app.on_message(filters.command("–¥–æ–∫—Å", prefixes="") & filters.reply)
def send_to_bots_handler(client, message):
    user_id = message.reply_to_message.from_user.id
    send_to_bots(user_id)
    message.reply_text("–ê–π–¥–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –±–æ—Ç—ã")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–∞–º —Ñ–∞–π–ª —Å –æ—Ç–≤–µ—Ç–∞–º–∏ –∏–∑ –±–æ—Ç–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    with open("responses.txt", "rb") as file:
        app.send_document("me", file)

    for frame in animated_text:
            message.edit(frame)
            sleep(0.4)

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–ø–∞—Ä—Å"
@app.on_message(filters.command("–ø–∞—Ä—Å", prefixes="") & filters.me)
async def parse_chat_info(client, message):
    # –í–∞—à–∞ –∞–Ω–∏–º–∞—Ü–∏—è
    animation = [
        "__parsing chat__",
        "‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú",
        "üü©‚¨ú‚¨ú‚¨ú‚¨ú‚¨ú",
        "üü©üü©‚¨ú‚¨ú‚¨ú‚¨ú",
        "üü©üü©üü©‚¨ú‚¨ú‚¨ú",
        "üü©üü©üü©üü©‚¨ú‚¨ú",
        "üü©üü©üü©üü©üü©‚¨ú",
        "üü©üü©üü©üü©üü©üü©",
        "send!",
        "check your favorites"
    ]

    for frame in animation:
        await message.edit(frame)
        await asyncio.sleep(1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º–µ—é—â–∏–π—Å—è —á–∞—Ç
    chat = await client.get_chat(message.chat.id)

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–∞—Ö —á–∞—Ç–∞
    members = []
    async for member in client.get_chat_members(chat.id):
        members.append(member.user)
        
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–∞–π–ª
    with open("chat_info.txt", "w", encoding="utf-8") as file:
        for member in members:
            user_id = member.id
            first_name = member.first_name
            last_name = member.last_name if member.last_name else ""
            username = member.username if member.username else ""
            is_premium = "Premium" if member.is_premium else "Not Premium"
            file.write(f"ID: {user_id}, First Name: {first_name}, Last Name: {last_name}, Username: {username}, Premium: {is_premium}\n")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
    with open("chat_info.txt", "rb") as file:
        await app.send_document("me", file)
    for frame in animated_text:
            message.edit(frame)
            sleep(0.4)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /tp
@app.on_message(filters.command("tp", ".") & filters.me)
async def type_animation(client, message):
    input_str = message.text.split(".tp ", maxsplit=1)[1]
    typing_symbol = ">"
    DELAY_BETWEEN_EDITS = 0.1
    previous_text = ""

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–∞ ">"
    await message.edit(typing_symbol)

    # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
    await asyncio.sleep(DELAY_BETWEEN_EDITS)

    # –ò—Ç–µ—Ä–∞—Ü–∏—è –ø–æ —Å–∏–º–≤–æ–ª–∞–º –≤—Ö–æ–¥—è—â–µ–π —Å—Ç—Ä–æ–∫–∏
    for character in input_str:
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–∏–º–≤–æ–ª–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç–µ–∫—Å—Ç—É
        previous_text = previous_text + "" + character

        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å —Å–∏–º–≤–æ–ª–æ–º ">"
        typing_text = previous_text + "" + typing_symbol

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
        await message.edit(f'<b>{typing_text}</b>', parse_mode='html')

        # –û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –∏—Ç–µ—Ä–∞—Ü–∏–µ–π
        await asyncio.sleep(DELAY_BETWEEN_EDITS)



    for frame in animated_text:
            message.edit(frame)
            sleep(0.4)

#–§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–≤–∑–ª–æ–º"
@app.on_message(filters.command("–≤–∑–ª–æ–º", prefixes="") & filters.me)
def hack_command_handler(client, message):
    # –ò–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    phone_number = re.search(r"\+\d+", message.text).group()
    
    # URL-–∞–¥—Ä–µ—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
    url = f"https://my.telegram.org/auth/send_password?phone={phone_number}"
    
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å HTTP-–∑–∞–ø—Ä–æ—Å
    response = requests.get(url)
    
    # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç
    if response.status_code == 200:
        client.send_message(message.chat.id, "–ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    else:
        client.send_message(message.chat.id, f"–û—à–∏–±–∫–∞: {response.status_code}")


    for frame in animated_text:
            message.edit(frame)
            sleep(0.1)


# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã "–≤–æ–π—Å"
@app.on_message(filters.command("–≤–æ–π—Å", prefixes="") & filters.me)
def –≤–æ–π—Å_command_handler(client, message):
    # –ü–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å
    user_id = message.reply_to_message.from_user.id
    
    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ—Å—Ç–æ–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    chat_info = client.get_chat(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —á–∞—Ç –∫–∞–Ω–∞–ª–æ–º
    if chat_info.type == "channel":
        # –ï—Å–ª–∏ —á–∞—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º, –ø–æ–ª—É—á–∏—Ç—å –µ–≥–æ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
        channel_id = chat_info.id
        
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –≤–∏–¥–µ –≤–∏–¥–µ–æ—á–∞—Ç–∞
        client.join_chat(channel_id)
    else:
        # –ï—Å–ª–∏ —á–∞—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º, —Å–æ–æ–±—â–∏—Ç—å –æ–± —ç—Ç–æ–º
        client.send_message(message.chat.id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–∞–Ω–∞–ª–µ.")


@app.on_message(filters.command("id", prefixes=".") & filters.reply)
def get_user_id(client, message):
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–≤–µ—á–∞–µ–º
    replied_user_id = message.reply_to_message.from_user.id
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ID –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∞—Ç
    message.reply_text(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {replied_user_id}")



    

if __name__ == "__main__":
    print("Telegram Magic running!")
    app.run()